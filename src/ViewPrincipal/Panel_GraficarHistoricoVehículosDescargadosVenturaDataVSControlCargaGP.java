
package ViewPrincipal;

import Catalogo.Controller.ControlDB_Articulo;
import Catalogo.Controller.ControlDB_CentroOperacion;
import Catalogo.Controller.ControlDB_Cliente;
import Catalogo.Controller.ControlDB_ZonaTrabajo;
import Catalogo.Model.Articulo;
import Catalogo.Model.CentroOperacion;
import Catalogo.Model.Cliente;
import Catalogo.Model.ZonaTrabajo;
import ModuloEquipo.View.MvtoEquipo_ModificarFinal;
import ModuloEquipo.View.MvtoEquipo_Procesar_Programado;
import Sistema.Controller.ControlDB_PanelControl;
import Sistema.Controller.ControlDB_Sistema;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.date.MonthConstants;
import org.jfree.ui.RectangleInsets;

public class Panel_GraficarHistoricoVehículosDescargadosVenturaDataVSControlCargaGP extends javax.swing.JPanel {
    private String tipoConexion ="";
    private ArrayList<CentroOperacion> listadoCentroOperacion_mvtoEquipo = null;
    private Cliente cliente=null;
    private Articulo articulo=null;
    private ArrayList<Cliente> listadoCliente=null;
    private ArrayList<Articulo> listadoArticulos=null;
    ArrayList<ZonaTrabajo> listadoZonaTrabajo = null;
    Iniciar_Graficar Iniciar1;
    Graficar_HistoricoVehiculosDescargados demo2;
    Graficar_HistoricoToneladasDescargadas demo3;
    Graficar_HistoricoVehiculosDescargadosPorAuxilar demo4;
    ChartPanel frame;
    CentroOperacion centroOperacion;
    public Panel_GraficarHistoricoVehículosDescargadosVenturaDataVSControlCargaGP(String tipoConexion, CentroOperacion centroOperacion) {
        initComponents();
        this.tipoConexion=tipoConexion;
        this.centroOperacion= centroOperacion;
        Iniciar1 = new Iniciar_Graficar(tipoConexion);
        System.out.println("centroOperacion: "+this.centroOperacion.getDescripcion());

        
        
        jLabel13.show(false);
        fechaInicioAsignacion.show(false);
        jLabel11.show(false);
        fechaFinAsignacion.show(false);
        

        
        buttonGroupFijoFlotante.add(checkFijo);
        buttonGroupFijoFlotante.add(checkFlotante);
        
        checkFijo.setSelected(true);
        
        //for(int i=1; i<=365; i++){
        for(int i=10; i<=365; i++){
            time.addItem(""+i);
        }
        iniciar.setEnabled(true);
        parar.setEnabled(false);    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        buttonGroupFijoFlotante = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        panel = new javax.swing.JScrollPane();
        titulo33 = new javax.swing.JLabel();
        rangoTiempo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        fechaInicioAsignacion = new com.toedter.calendar.JDateChooser();
        fechaFinAsignacion = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        checkFijo = new javax.swing.JRadioButton();
        checkFlotante = new javax.swing.JRadioButton();
        titulo30 = new javax.swing.JLabel();
        time = new javax.swing.JComboBox<>();
        modalidadHilo = new javax.swing.JComboBox<>();
        iniciar = new javax.swing.JButton();
        parar = new javax.swing.JButton();
        titulo32 = new javax.swing.JLabel();
        titulo39 = new javax.swing.JLabel();
        titulo29 = new javax.swing.JLabel();
        titulo40 = new javax.swing.JLabel();
        titulo36 = new javax.swing.JLabel();
        titulo37 = new javax.swing.JLabel();
        titulo31 = new javax.swing.JLabel();
        titulo34 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 1440, 520));

        titulo33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo33.setForeground(new java.awt.Color(51, 51, 51));
        titulo33.setText("FECHA:");
        titulo33.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo33, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 50, 30));

        rangoTiempo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HOY", "OTRA FECHA" }));
        rangoTiempo.setToolTipText("");
        rangoTiempo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rangoTiempoItemStateChanged(evt);
            }
        });
        add(rangoTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 110, 30));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("Fecha Inicio:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 80, 30));

        fechaInicioAsignacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaInicioAsignacionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fechaInicioAsignacionMouseEntered(evt);
            }
        });
        add(fechaInicioAsignacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 170, 30));

        fechaFinAsignacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaFinAsignacionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fechaFinAsignacionMouseEntered(evt);
            }
        });
        add(fechaFinAsignacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 10, 170, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Fecha Fin:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 60, 30));

        checkFijo.setBackground(new java.awt.Color(255, 255, 255));
        checkFijo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkFijo.setForeground(new java.awt.Color(51, 51, 51));
        checkFijo.setText("Fijo");
        checkFijo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        checkFijo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkFijoItemStateChanged(evt);
            }
        });
        checkFijo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                checkFijoCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        checkFijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFijoActionPerformed(evt);
            }
        });
        add(checkFijo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 50, 90, 20));

        checkFlotante.setBackground(new java.awt.Color(255, 255, 255));
        checkFlotante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkFlotante.setForeground(new java.awt.Color(51, 51, 51));
        checkFlotante.setText("Flotante");
        checkFlotante.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        checkFlotante.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkFlotanteItemStateChanged(evt);
            }
        });
        checkFlotante.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                checkFlotanteCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        checkFlotante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFlotanteActionPerformed(evt);
            }
        });
        add(checkFlotante, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 70, 90, 20));

        titulo30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo30.setForeground(new java.awt.Color(0, 102, 102));
        titulo30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo30.setText("Tiempo Ejecución");
        titulo30.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo30, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 10, 120, 30));

        time.setToolTipText("");
        add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 50, 120, 30));

        modalidadHilo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MINUTOS", "HORAS", "DÍAS" }));
        modalidadHilo.setToolTipText("");
        modalidadHilo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modalidadHiloItemStateChanged(evt);
            }
        });
        add(modalidadHilo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 50, 120, 30));

        iniciar.setBackground(new java.awt.Color(255, 255, 255));
        iniciar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        iniciar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/play3.png"))); // NOI18N
        iniciar.setMnemonic('T');
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });
        add(iniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 110, 40));

        parar.setBackground(new java.awt.Color(255, 255, 255));
        parar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/stop_f.png"))); // NOI18N
        parar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararActionPerformed(evt);
            }
        });
        add(parar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 120, 40));

        titulo32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo32.setForeground(new java.awt.Color(51, 51, 51));
        titulo32.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo32.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo32, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 990, 90));

        titulo39.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo39.setForeground(new java.awt.Color(0, 102, 102));
        titulo39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo39.setText("Modalidad Grafica");
        titulo39.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo39, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, 150, 30));

        titulo29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo29.setForeground(new java.awt.Color(51, 51, 51));
        titulo29.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo29.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo29, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 40, 300, 90));

        titulo40.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo40.setForeground(new java.awt.Color(51, 51, 51));
        titulo40.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo40.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo40, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, 150, 120));

        titulo36.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo36.setForeground(new java.awt.Color(0, 102, 102));
        titulo36.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        titulo36.setText("FILTROS");
        titulo36.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo36.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo36, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 990, 30));

        titulo37.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo37.setForeground(new java.awt.Color(51, 51, 51));
        titulo37.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo37.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo37, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 130, 30));

        titulo31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo31.setForeground(new java.awt.Color(51, 51, 51));
        titulo31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo31.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo31, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 10, 300, 120));

        titulo34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        titulo34.setForeground(new java.awt.Color(51, 51, 51));
        titulo34.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        titulo34.setPreferredSize(new java.awt.Dimension(133, 15));
        add(titulo34, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, 150, 90));
    }// </editor-fold>//GEN-END:initComponents

    private void fechaInicioAsignacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaInicioAsignacionMouseClicked
        //  alerta_fechaInicio.setText("");
    }//GEN-LAST:event_fechaInicioAsignacionMouseClicked

    private void fechaInicioAsignacionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaInicioAsignacionMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaInicioAsignacionMouseEntered

    private void fechaFinAsignacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaFinAsignacionMouseClicked
        //alerta_fechaFinal.setText("");
    }//GEN-LAST:event_fechaFinAsignacionMouseClicked

    private void fechaFinAsignacionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaFinAsignacionMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaFinAsignacionMouseEntered

    private void rangoTiempoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rangoTiempoItemStateChanged
        if(rangoTiempo.getSelectedIndex()==0){//Seleccionó hoy
            jLabel13.show(false);
            fechaInicioAsignacion.show(false);
            jLabel11.show(false);
            fechaFinAsignacion.show(false);
        }else{//Seleccionó otro rango de tiempo
            jLabel13.show(true);
            fechaInicioAsignacion.show(true);
            jLabel11.show(true);
            fechaFinAsignacion.show(true);
        }
    }//GEN-LAST:event_rangoTiempoItemStateChanged

    private void checkFijoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkFijoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFijoItemStateChanged

    private void checkFijoCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_checkFijoCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFijoCaretPositionChanged

    private void checkFijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFijoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFijoActionPerformed

    private void checkFlotanteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkFlotanteItemStateChanged
        if(checkFlotante.isSelected()){
            iniciar.setEnabled(true);
            parar.setEnabled(false);
        }else{
            iniciar.setEnabled(true);
            parar.setEnabled(true);
        }
    }//GEN-LAST:event_checkFlotanteItemStateChanged

    private void checkFlotanteCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_checkFlotanteCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFlotanteCaretPositionChanged

    private void checkFlotanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFlotanteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkFlotanteActionPerformed

    private void pararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararActionPerformed
        Iniciar1.stop();
        Iniciar1 = new Iniciar_Graficar(tipoConexion);
        iniciar.setEnabled(true);
        parar.setEnabled(false);
    }//GEN-LAST:event_pararActionPerformed

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        if(checkFijo.isSelected()){
            Iniciar1 = new Iniciar_Graficar(tipoConexion);
            Iniciar1.start();
        
            iniciar.setEnabled(false);
            parar.setEnabled(true);
        }else{//Seleccionó flotante
            Iniciar1 = new Iniciar_Graficar(tipoConexion);
            Iniciar1.start();
        } 
    }//GEN-LAST:event_iniciarActionPerformed

    private void modalidadHiloItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modalidadHiloItemStateChanged
        if(modalidadHilo.getSelectedIndex()==0){//Seleccionó MINUTOS
            time.removeAllItems();
            for(int i=10; i<=365; i++){
                time.addItem(""+i);
            }
        }else{
            if(modalidadHilo.getSelectedIndex()==1){//Seleccionó HORAS
                time.removeAllItems();
                for(int i=1; i<=365; i++){
                    time.addItem(""+i);
                }
            }else{//Seleccionó DÍAS
                time.removeAllItems();
                for(int i=1; i<=365; i++){
                    time.addItem(""+i);
                }
            }
        }
    }//GEN-LAST:event_modalidadHiloItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.ButtonGroup buttonGroupFijoFlotante;
    private javax.swing.JRadioButton checkFijo;
    private javax.swing.JRadioButton checkFlotante;
    private com.toedter.calendar.JDateChooser fechaFinAsignacion;
    private com.toedter.calendar.JDateChooser fechaInicioAsignacion;
    private javax.swing.JButton iniciar;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox<String> modalidadHilo;
    private javax.swing.JScrollPane panel;
    private javax.swing.JButton parar;
    private javax.swing.JComboBox<String> rangoTiempo;
    private javax.swing.JComboBox<String> time;
    private javax.swing.JLabel titulo29;
    private javax.swing.JLabel titulo30;
    private javax.swing.JLabel titulo31;
    private javax.swing.JLabel titulo32;
    private javax.swing.JLabel titulo33;
    private javax.swing.JLabel titulo34;
    private javax.swing.JLabel titulo36;
    private javax.swing.JLabel titulo37;
    private javax.swing.JLabel titulo39;
    private javax.swing.JLabel titulo40;
    // End of variables declaration//GEN-END:variables
    public  class Iniciar_Graficar extends Thread{  
        private String typeConnection;
    
        public Iniciar_Graficar(String typeConnection) {
            this.typeConnection=typeConnection;       
        }
        @Override
        public void run() {
            while(true){
                boolean validar=true;
                String scriptVenturaData ="";
                String scriptControlCargaGP ="";
                String fechaInicio="";
                String fechaFin=""; 
                //Cargamos el Centro de Operacion
                scriptVenturaData += " AND [mc_cntro_oper_cdgo]= "+ centroOperacion.getCodigo();
                if(validar){
                    if(rangoTiempo.getSelectedIndex()==1){
                        try{
                            Calendar fechaI = fechaInicioAsignacion.getCalendar();
                            String anoI = ""+fechaI.get(Calendar.YEAR);
                            String mesI = "";
                            if((fechaI.get(Calendar.MONTH) +1) <=9){
                                mesI = "0"+(fechaI.get(Calendar.MONTH) + 1);
                            }else{
                                mesI = ""+(fechaI.get(Calendar.MONTH) + 1);
                            }
                            String diaI = "";
                            if(fechaI.get(Calendar.DAY_OF_MONTH) <=9){
                                diaI = "0"+fechaI.get(Calendar.DAY_OF_MONTH);
                            }else{
                                diaI = ""+fechaI.get(Calendar.DAY_OF_MONTH);
                            }
                            fechaInicio=anoI+"-"+mesI+"-"+diaI+" "+"00"+":00:00.0";     
                            try{   
                                Calendar fechaF = fechaFinAsignacion.getCalendar();
                                String anoF = ""+fechaF.get(Calendar.YEAR);
                                String mesF = "";
                                if((fechaF.get(Calendar.MONTH) +1) <=9){
                                    mesF = "0"+(fechaF.get(Calendar.MONTH) + 1);
                                }else{
                                    mesF = ""+(fechaF.get(Calendar.MONTH) + 1);
                                }
                                String diaF = "";
                                if(fechaF.get(Calendar.DAY_OF_MONTH) <=9){
                                    diaF = "0"+fechaF.get(Calendar.DAY_OF_MONTH);
                                }else{
                                    diaF = ""+fechaF.get(Calendar.DAY_OF_MONTH);
                                }
                                fechaFin=anoF+"-"+mesF+"-"+diaF+" "+"23"+":"+"59"+":00.0";
                                 scriptVenturaData += " AND [mc_fecha_inicio_descargue] BETWEEN '"+ fechaInicio+"' AND '"+ fechaFin+"'";
                                 scriptControlCargaGP += " AND [ti_fcha_slda] BETWEEN '"+ fechaInicio+"' AND '"+ fechaFin+"'";
                            }catch(Exception e){
                                JOptionPane.showMessageDialog(null,"Error!!.. Debe verificar la Fecha de finalización","Advertencia",JOptionPane.ERROR_MESSAGE);
                                validar=false;
                                this.stop();
                            }
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(null,"Error!!.. Debe verificar la Fecha de Inicio","Advertencia",JOptionPane.ERROR_MESSAGE);
                            validar=false;
                            this.stop();
                        }      
                    }else{//Seleccionó en rango de fecha hoy
                        try {
                            fechaInicio= new ControlDB_Sistema(tipoConexion).retornarFechaDelServidor()+" "+"00"+":00:00.0";    
                            fechaFin= new ControlDB_Sistema(tipoConexion).retornarFechaDelServidor()+" "+"23"+":"+"59"+":00.0";
                            scriptVenturaData += " AND [mc_fecha_inicio_descargue] BETWEEN '"+ fechaInicio+"' AND '"+ fechaFin+"'";
                            scriptControlCargaGP += " AND [ti_fcha_slda] BETWEEN '"+ fechaInicio+"' AND '"+ fechaFin+"'";
                        } catch (SQLException ex) {
                            this.stop();
                            Logger.getLogger(Panel_GraficarHistoricoVehículosDescargadosVenturaDataVSControlCargaGP.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                    }
                }
                //Validamos el tipo de grafica
                if(validar){
                    if(checkFijo.isSelected()){
                        ArrayList<String> listado=null;
                        try {
                            listado= new ControlDB_PanelControl(typeConnection).HistoricoVehiculosDescargadosVenturaVSControlCargaGP(scriptVenturaData,scriptControlCargaGP);
                        } catch (SQLException ex) {
                            Logger.getLogger(Panel_GraficarHistoricoVehículosDescargadosVenturaDataVSControlCargaGP.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if(listado != null){
                            String cliente="";
                            ArrayList<ArrayList<String>> listadoClientes = null;
                            ArrayList<String> historicoCliente= null;
                            boolean validator=true;
                            for(String data: listado){
                                System.out.print(data+"====================================>For\n");
                                String[] value= data.split("###");
                                if(validator){
                                    cliente =value[2];
                                    //series1= new TimeSeries(value[2], Day.class);
                                    listadoClientes= new ArrayList<>();
                                    historicoCliente= new ArrayList<>();
                                    validator=false;
                                    historicoCliente.add(data);
                                }
                                if(!cliente.equals(value[2])){
                                    listadoClientes.add(historicoCliente);
                                    historicoCliente= new ArrayList<>();
                                    historicoCliente.add(data);
                                    cliente =value[2];
                                }else{
                                    historicoCliente.add(data);
                                }
                            }
                            listadoClientes.add(historicoCliente);
                            TimeSeriesCollection dataset = new TimeSeriesCollection();
                            int contador= 1;
                            for(ArrayList<String> objeto : listadoClientes){
                                for(String datax : objeto){
                                    System.out.println(datax+"\n");
                                }
                                System.out.println("Finalizado");
                            }
                            if(listadoClientes != null){
                                TimeSeries series1 = null;
                                for(ArrayList<String> objeto : listadoClientes){
                                    if(contador==1){
                                        boolean inciar= true;
                                        for(String data : objeto){
                                            String[] value= data.split("###");
                                            if(inciar){
                                                System.out.println("CLiente======================="+ value[2]);
                                                series1 = new TimeSeries(value[2], Day.class);
                                                inciar=false;
                                            }
                                            String[] fecha=value[0].split("-");
                                            switch(Integer.parseInt((fecha[1]))){
                                                case 1:{//Enero
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.JANUARY, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 2:{//Febrero
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.FEBRUARY, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 3:{//Marzo
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.MARCH, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 4:{//Abril
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.APRIL, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 5:{//Mayo
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.MAY, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 6:{//Junio
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.JUNE, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 7:{//Julio
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.JULY, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 8:{//Agosto
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.AUGUST, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 9:{//Septiembre
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.SEPTEMBER, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 10:{//Octubre
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.OCTOBER, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 11:{//Noviembre
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.NOVEMBER, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                                case 12:{//Diciembre
                                                    series1.addOrUpdate(new Day(Integer.parseInt(fecha[2]), MonthConstants.DECEMBER, Integer.parseInt(fecha[0])), Integer.parseInt(value[1]));
                                                    break;
                                                }
                                            }
                                        }
                                        dataset.addSeries(series1);  
                                    }
                                }
                            }
                            JFreeChart chart=ChartFactory.createTimeSeriesChart("VEHÍCULOS DESCARGADOS VENTURA DATA VS CONTROLCARGA", "CLIENTES", "VEHÍCULOS", dataset,true,true,true);
                            chart.setBackgroundPaint(Color.white);

                            XYPlot plot = (XYPlot) chart.getPlot();
                            plot.setBackgroundPaint(Color.lightGray);
                            plot.setDomainGridlinePaint(Color.white);
                            plot.setRangeGridlinePaint(Color.white);
                            plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
                            plot.setDomainCrosshairVisible(true);
                            plot.setRangeCrosshairVisible(true);

                            XYItemRenderer r = plot.getRenderer();
                            if (r instanceof XYLineAndShapeRenderer) {
                                XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) r;
                                renderer.setBaseShapesVisible(true);
                                renderer.setBaseShapesFilled(true);
                                renderer.setDrawSeriesLineAsPath(true);

                                XYItemLabelGenerator xy= new StandardXYItemLabelGenerator();
                                renderer.setBaseItemLabelGenerator( xy );
                                renderer.setBaseItemLabelsVisible(true);
                            }
                            DateAxis axis = (DateAxis) plot.getDomainAxis();
                            SimpleDateFormat formatter  = new SimpleDateFormat("dd MMM YYYY");
                            axis.setDateFormatOverride(formatter);
                            frame= new ChartPanel( chart);
                            frame.setSize(450,500);
                            panel.setViewportView(frame);
                            frame.setFillZoomRectangle(true);
                            frame.setMouseWheelEnabled(true);
                        }else{
                            panel.setViewportView(new Graficar_Vacia());
                        }
                    }
                    /*if(checkFlotante.isSelected()){
                        demo2= new Graficar_HistoricoVehiculosDescargados("");
                        demo2.inicar("VEHÍCULOS DESCARGADOS POR CLIENTES",script,tipoConexion,Integer.parseInt(time.getSelectedItem().toString()),modalidadHilo.getSelectedItem().toString());
                        demo2.setVisible(true);
                        demo2.Iniciar12.start();
                        this.stop();
                    }*/
                }
                int valortime=Integer.parseInt(time.getSelectedItem().toString());
                /*if(modalidadHilo.getSelectedItem().toString().equals("SECOND")){
                    valortime= valortime * 1000;
                }*/
                if(modalidadHilo.getSelectedItem().toString().equals("MINUTOS")){
                    valortime= valortime * 1000* 60;
                }
                if(modalidadHilo.getSelectedItem().toString().equals("HORAS")){
                    valortime= valortime * 1000 * 60 * 60;
                }
                if(modalidadHilo.getSelectedItem().toString().equals("DÍAS")){
                    valortime= valortime * 1000 * 60 * 60 * 24;
                }
                try { 
                    Thread.sleep(valortime); 
                } catch (InterruptedException ex) {
                    Logger.getLogger(MvtoEquipo_Procesar_Programado.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }
        }
    }  
}
